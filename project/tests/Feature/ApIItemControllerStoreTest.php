<?php

namespace Tests\Feature;

use App\Repositories\UserRepository;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

class ApIItemControllerStoreTest extends TestCase
{
    protected Authenticatable|Model $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = (new UserRepository())->getById(1);
    }
    public function testStoreApi() {
        $response = $this->postRequestToRouteStore();
        $content = json_decode($response->getContent(), true);
        $response->assertStatus(200);
        $response->assertJsonPath('message',"Success, item stored!");
        $response->assertJsonPath('success',true);
        self::assertEquals("store test", $content['data']['name']);
        self::assertEquals("store test", $content['data']['key']);
    }

    public function testStoreApiValidationError() {
        $response = $this->postRequestToRouteStore(false);
        $response->assertStatus(500);
        $response->assertJsonPath('success',false);
        $response->assertJsonPath('message',"Validation error");
    }

    private function postRequestToRouteStore($key = true): TestResponse {
        return $key ? $this->actingAs($this->user)->withSession(['banned' => false])->post('api/store',
            ['name'=>'store test', 'key'=>'store test']) :
            $this->actingAs($this->user)->withSession(['banned' => false])->post('api/store',
                ['name'=>'store test']);
    }

}
