<?php

namespace Tests\Feature;

use App\Models\User;
use App\Repositories\UserRepository;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

class AuthGroupControllerTest extends TestCase
{
    protected Authenticatable|Model $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = (new UserRepository())->getById(1);
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testLoginRedirect() {
        $user = User::factory()->create();
        $response = $this->postRequestLogin($user->email, 'password');
        $response->assertRedirect('/home');
        $this->assertAuthenticatedAs($user);

    }

    public function testLoginInvalidPassword() {
        $user = User::factory()->create();
        $response = $this->postRequestLogin($user->email, 'invalid-password');
        $response->assertRedirect('/login');
        $response->assertSessionHasErrors('email');
        $this->assertTrue(session()->hasOldInput('email'));
        $this->assertFalse(session()->hasOldInput('password'));
        $this->assertGuest();
    }

    public function testUserCanRegisterSuccessfully() {
        $response = $this->postRequestRegister('John Doe', 'john@example.com', 'password');
        $response->assertRedirect('/home');
        $this->assertDatabaseHas('users', ['email' => 'john@example.com']);
    }

    public function testUserCanConfirmPasswordAndAccessSensitiveRoute() {
        Auth::login($this->user);
        $response = $this->post('password/confirm', ['password' => 'password',]);
        $response->assertRedirect('/');
    }

    public function testUserCanLogin() {
        $user = User::factory()->create();
        $response = $this->postRequestLogin($user->email, 'password');
        $response->assertRedirect('/home');
        $this->assertAuthenticatedAs($user);
    }

    public function testUserCannotLoginWithInvalidCredentials() {
        $response = $this->postRequestLogin('invalid@example.com', 'wrong');
        $response->assertSessionHasErrors('email');
        $this->assertGuest();
    }

    public function testMiddlewareAuthRedirect() {
        $response = $this->delete('delete/1');
        $response->assertRedirect('login');
    }

    private function postRequestLogin($email, $password): TestResponse {
        return $this->from('/login')->post('/login', [
            'email' => $email,
            'password' => $password,
        ]);
    }
    private function postRequestRegister($name, $email, $password): TestResponse {
        return $this->post('register', [
            'name' => $name,
            'email' => $email,
            'password' => $password,
            'password_confirmation' => $password,
        ]);
    }
}
